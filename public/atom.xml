<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[学而时习之]]></title>
  <subtitle><![CDATA[程序猿,攻城狮,爱生活,爱编程。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://niuleipeng.com/"/>
  <updated>2015-08-10T09:46:42.000Z</updated>
  <id>http://niuleipeng.com/</id>
  
  <author>
    <name><![CDATA[慕容羽兮]]></name>
    <email><![CDATA[niuleipeng@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[The Note of the Book JavaScript: The Definitive Guide]]></title>
    <link href="http://niuleipeng.com/2015/08/10/The-Note-of-the-Book-JavaScript-The-Definitive-Guide/"/>
    <id>http://niuleipeng.com/2015/08/10/The-Note-of-the-Book-JavaScript-The-Definitive-Guide/</id>
    <published>2015-08-10T03:06:45.000Z</published>
    <updated>2015-08-10T09:46:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="函数作用域和变量声明">函数作用域和变量声明</h2><p>在一些類似於C語言的編程語言中，花括號中的每一段代碼都具有各自的作用域，而且變量聲明在聲明它們的代碼段之前是不可見的，我們稱之爲塊級作用域（block scope），而 JavaScript 中沒有塊級作用域。JavaScript 中取而代之的使用了函數作用域（function scope）：變量在聲明它們的函數體以及這個函數體嵌套的任意函數體內都是有定義的。</p>
<a id="more"></a>
<script src="//gist.github.com/9ba81a813c4fa9bbdafe.js"></script>
<p>JavaScript<br>的函數作用域是指函數內聲明的所有變量在函數體內始終是可見的。有意思的是，這意味着變量在聲明之前已經可以使用。JavaScript 的這個特性被非正式的稱爲聲明提前（hoisting），即 JavaScript 函數里聲明的所有變量（但不涉及賦值）都被“提前”至函數的頂部（聲明提前這步操作是在 JavaScript 引擎的“預編譯”時進行的，是在代碼開始運行之前),看一下如下代碼：</p>
<script src="//gist.github.com/6ba9265a1b613aa297ec.js"></script>
<p>在 JavaScript 中,函數內的變量聲明會被“提前”至函數頂部，同時變量初始化留在原來的位置：</p>
<script src="//gist.github.com/d6f8c7b4d0ecc4c869c0.js"></script>
<p>由於 JavaScript 沒有塊級作用域， 所以將變量聲明寫在函數的頂部，而不是將聲明靠在使用變量的地方，這是一個好習慣，很好的反映了真實的變量作用域。</p>
<h2 id="作爲屬性的變量">作爲屬性的變量</h2><p>當聲明一個 JavaScript 變量時，實際上是定義了全局對象的一個屬性。當使用 var 聲明一個變量時，這個變量是不可配置的，也就是說這個變量不能通過 delete 運算符刪除。</p>
<h2 id="in_運算符">in 運算符</h2><p>in 運算符希望它的左操作數是一個字符串或者可以轉換爲字符串，希望它的右操作數是一個對象。如果右側的對象擁有一個名爲左操作數的屬性名，那麼這個表達式返回 true ，例如：</p>
<script src="//gist.github.com/ac29e00b24a211b682ab.js"></script>
<h2 id="instanceof_運算符">instanceof 運算符</h2><p>instanceof 運算符希望它的左操作數是一個對象，右操作數是標識對象的類。如果左側的對象是右側的類的實例，返回true， 否則返回false。JavaScript 中對象的類是通過初始化它們的構造函數來定義的。 這樣的話，instanceof 的右操作數應當是一個函數。比如：</p>
<script src="//gist.github.com/2b6d01396f06d7839cba.js"></script>
<h2 id="語句">語句</h2><p>JavaScript中主要包括兩類，表達式（expression）和語句（statement）。</p>
<p>表達式在 JavaScript 中是短語， 那麼語句就是 JavaScript  的整句或者命令。</p>
<p>表達式計算出一個值，但語句用來執行以使某件事情發生。</p>
<h3 id="聲明語句">聲明語句</h3><h4 id="function">function</h4><h5 id="函數定義表達式">函數定義表達式</h5><script src="//gist.github.com/8a5d264a764765a58c53.js"></script>
<p>與 var 定義的變量一樣，函數定義表達式的額聲明提前了，但是初始化還是在原來的位置，所以不能在初始化之前調用一個函數。</p>
<h5 id="函數聲明語句">函數聲明語句</h5><script src="//gist.github.com/984002b12abda78458bf.js"></script>
<p>函數聲明語句，將函數的聲明與初始化都提前了，所以可以在函數聲明之前就調用這個函數。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="函数作用域和变量声明">函数作用域和变量声明</h2><p>在一些類似於C語言的編程語言中，花括號中的每一段代碼都具有各自的作用域，而且變量聲明在聲明它們的代碼段之前是不可見的，我們稱之爲塊級作用域（block scope），而 JavaScript 中沒有塊級作用域。JavaScript 中取而代之的使用了函數作用域（function scope）：變量在聲明它們的函數體以及這個函數體嵌套的任意函數體內都是有定義的。</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://niuleipeng.com/tags/JavaScript/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[div块与内部的img元素高度不一致问题]]></title>
    <link href="http://niuleipeng.com/2015/07/07/wrong-height-of-div-with-img-tag-inside/"/>
    <id>http://niuleipeng.com/2015/07/07/wrong-height-of-div-with-img-tag-inside/</id>
    <published>2015-07-07T03:08:52.000Z</published>
    <updated>2015-07-07T03:19:43.000Z</updated>
    <content type="html"><![CDATA[<p>今天在做页面的时候遇到一个问题，类似于下面的页面结构：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"foo.jpg"</span> <span class="attribute">alt</span>=<span class="value">" "</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>整个div块的高度比img的高度高了一些，比如img的高度是10px，但是div块的高度却可能是16px，img元素未主动设置任何margin或者padding值，很奇怪的表现。</p>
<p>去stackoverflow上找了一下，原来是因为image是行内元素，image的自然样式会给image默认添加一些margin-bottom值，解决方法也很简单：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span> <span class="tag">img</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="comment">/*可选*/</span></span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>; <span class="comment">/*可选*/</span></span><br><span class="line"><span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>以上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在做页面的时候遇到一个问题，类似于下面的页面结构：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span cl]]>
    </summary>
    
      <category term="CSS" scheme="http://niuleipeng.com/tags/CSS/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How does JavaScript closures work]]></title>
    <link href="http://niuleipeng.com/2015/07/03/How-does-JavaScript-closures-work/"/>
    <id>http://niuleipeng.com/2015/07/03/How-does-JavaScript-closures-work/</id>
    <published>2015-07-03T11:32:26.000Z</published>
    <updated>2015-07-03T11:58:15.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">princess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> adventures = [];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">princeCharming</span><span class="params">()</span> </span>&#123;<span class="comment">/* .. */</span>&#125; <span class="comment">//白马王子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> unicorn = &#123; <span class="comment">/* ... */</span> &#125;, <span class="comment">//独角兽</span></span><br><span class="line">        dragons = &#123; <span class="comment">/* ... */</span> &#125;, <span class="comment">//龙</span></span><br><span class="line">        squirrel = <span class="string">"Hello"</span>;  <span class="comment">//松鼠</span></span><br><span class="line"></span><br><span class="line">    adventures.push(unicorn, dragons, squirrel, ...);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        story: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> adventures[adventures.length - <span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> littleGirl = princess();</span><br><span class="line">littleGirl.story();</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>以下内容来自于<a href="http://www.zhihu.com/people/gong-yifeng" target="_blank" rel="external">龚一峰</a>，感谢。</p>
<p>内容来源于：<a href="http://stackoverflow.com/questions/111102/how-do-javascript-closures-work" target="_blank" rel="external">How do JavaScript closures work?</a><br>里面对闭包的讲解让我深受启发，借此分享下~</p>
<p>主旨：</p>
<blockquote>
<p>if you can’t explain it to a six-years-old, you really don’t understand it yourself.</p>
</blockquote>
<p>正文</p>
<blockquote>
<p>从前：<br>有一位公主……<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">princess</span><span class="params">()</span> </span>&#123;</span><br></pre></td></tr></table></figure></p>
<p>她生活在一个充满奇幻冒险的世界里, 她遇到了她的白马王子, 带着他骑着独角兽开始周游这个世界，与巨龙战斗，巧遇会说话的动物，还有其他一些新奇的事物。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> adventures = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">princeCharming</span><span class="params">()</span> </span>&#123;<span class="comment">/* .. */</span>&#125; <span class="comment">//白马王子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> unicorn = &#123; <span class="comment">/* ... */</span> &#125;, <span class="comment">//独角兽</span></span><br><span class="line">     dragons = &#123; <span class="comment">/* ... */</span> &#125;, <span class="comment">//龙</span></span><br><span class="line">     squirrel = <span class="string">"Hello"</span>;  <span class="comment">//松鼠</span></span><br><span class="line"></span><br><span class="line">adventures.push(unicorn, dragons, squirrel, ...);</span><br></pre></td></tr></table></figure></p>
<p>但是她不得不回到她的王国里，面对那些年老的大臣。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br></pre></td></tr></table></figure></p>
<p>她会经常给那些大臣们分享她作为公主最近在外面充满奇幻的冒险经历。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">story: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> adventures[adventures.length - <span class="number">1</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是在大臣们的眼里，总是认为她只是个小女孩……<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> littleGirl = princess();</span><br></pre></td></tr></table></figure></p>
<p>….讲的是一些不切实际，充满想象的故事<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">littleGirl.story();</span><br></pre></td></tr></table></figure></p>
<p>即便所有大臣们知道他们眼前的小女孩是真的公主，但是他们却不会相信有巨龙或独角兽，因为他们自己从来没有见到过。大臣们只会觉得它们只存在于小女孩的想象之中。</p>
<p>但是我们却知道小女孩述说的是事实…….</p>
</blockquote>
<p>论编程抽象能力的重要性….</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">princess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> adventures = [];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">princeCharming</span><span class="params">()</span> </span>&#123;<span class="comment">/* .. */</span>&#125; <span class="comment">//白马王子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> unicorn = &#123; <span class="comment">/* ... */</span> &#125;, <span class="comment">//独角兽</span></span><br><span class="line">        dragons = &#123; <span class="comment">/* ... */</span> &#125;, <span class="comment">//龙</span></span><br><span class="line">        squirrel = <span class="string">"Hello"</span>;  <span class="comment">//松鼠</span></span><br><span class="line"></span><br><span class="line">    adventures.push(unicorn, dragons, squirrel, ...);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        story: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> adventures[adventures.length - <span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> littleGirl = princess();</span><br><span class="line">littleGirl.story();</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://niuleipeng.com/tags/JavaScript/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Whatever will be, will be.]]></title>
    <link href="http://niuleipeng.com/2015/07/01/bye-bye/"/>
    <id>http://niuleipeng.com/2015/07/01/bye-bye/</id>
    <published>2015-07-01T05:19:42.000Z</published>
    <updated>2015-07-01T05:25:07.000Z</updated>
    <content type="html"><![CDATA[<h3 id="It_is_time_to_say_goodbye-_So,_bye_bye-">It is time to say goodbye. So, bye bye.</h3><h1 id="My_world_is_full_of_sunshine_now,_because_of_you-_And,_thank_you-">My world is full of sunshine now, because of you. And, thank you.</h1>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="It_is_time_to_say_goodbye-_So,_bye_bye-">It is time to say goodbye. So, bye bye.</h3><h1 id="My_world_is_full_of_sunshine_now,_becau]]>
    </summary>
    
      <category term="心情" scheme="http://niuleipeng.com/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="随笔" scheme="http://niuleipeng.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔" scheme="http://niuleipeng.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[20150626备忘]]></title>
    <link href="http://niuleipeng.com/2015/06/26/tips-of-20150626/"/>
    <id>http://niuleipeng.com/2015/06/26/tips-of-20150626/</id>
    <published>2015-06-26T13:57:17.000Z</published>
    <updated>2015-06-26T15:33:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="强制显示滚动条">强制显示滚动条</h2><p>有时候项目中可能会有这样的需求，需要在一个较小的高度内显示较多的内容，这时就需要使用CSS的溢出隐藏功能，<code>overflow: auto</code>，或者<code>overflow: scroll</code>。有时候，我们希望会出现垂直的滚动条来告诉用户，这个地方有更多的内容在隐藏着，你可以滚动查看这些内容。如果没有滚动条的话，用户也许不会注意到有隐藏的内容。</p>
<p>按照MDN的解释，使用<code>overflow: auto</code>，或者<code>overflow: scroll</code>是会出现滚动条的，但是在OS X下面（Windows未测试）只有把鼠标放到隐藏区域上方才会出现滚动条，这显然是不符合我们的要求的，我们不想让用户错过这些内容。那么，使用下面的方法可以使OS X强制显示垂直滚动条。</p>
<a id="more"></a>
<script src="//gist.github.com/e5fd3d13728f11fa0bae.js"></script>
<p>在使用<code>radio</code>元素进行单选时，选中一个元素后，可能需要清除这个选中，下面是jQuery的一种清除radio选中的方式：</p>
<script src="//gist.github.com/ab68ff7e4f97d3c398e9.js"></script>
<p>另外的方式：</p>
<script src="//gist.github.com/1ab345e8481658b01353.js"></script>
<p>radio的按钮有点小，如何点击radio按钮后面的文字也可以选中这个radio呢？下面是一种解决方法：</p>
<script src="//gist.github.com/42dd7b8aa33e6901fe4c.js"></script>
<p>今天遇到一个问题，服务器返回了一个json结构的数据，我需要把这个数据中的一部分拿出来放在页面上，用来更新对应位置的内容。</p>
<p>开始我考虑使用js的foreach循环，把json中的数据通过jQuery的html()方法直接写到页面中去。html（）方法接受一个字符串，并不能在里面执行js代码。然后考虑把js代码单独拿出来，返回一个html字符串，然后通过html()放进去。发现还是不行，因为要从json中拿到对应的数据，我不知道改怎么做。</p>
<p>后来考虑到js的template，Google了一下，发现underscore.js也有类似的功能，实现的也比较友好，而且正好公司的项目里使用了这个库，不用导入更多的第三方库了。</p>
<p>下面是underscore文档关于template部分的说明：</p>
<blockquote>
<p>template<em>.template(templateString, [settings])<br>Compiles JavaScript templates into functions that can be evaluated for rendering. Useful for rendering complicated bits of HTML from JSON data sources. Template functions can both interpolate values, using <code>&lt;%= … %&gt;</code>, as well as execute arbitrary JavaScript code, with <code>&lt;% … %&gt;</code>. If you wish to interpolate a value, and have it be HTML-escaped, use <code>&lt;%- … %&gt;</code>. When you evaluate a template function, pass in a data object that has properties corresponding to the template’s free variables. The settings argument should be a hash containing any </em>.templateSettings that should be overridden.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compiled = _.template(<span class="string">"hello: &lt;%= name %&gt;"</span>);</span><br><span class="line">compiled(&#123;name: <span class="string">'moe'</span>&#125;);</span><br><span class="line">=&gt; <span class="string">"hello: moe"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> template = _.template(<span class="string">"&lt;b&gt;&lt;%- value %&gt;&lt;/b&gt;"</span>);</span><br><span class="line">template(&#123;value: <span class="string">'&lt;script&gt;'</span>&#125;);</span><br><span class="line">=&gt; <span class="string">"&lt;b&gt;&amp;lt;script&amp;gt;&lt;/b&gt;"</span></span><br></pre></td></tr></table></figure>
<p>You can also use print from within JavaScript code. This is sometimes more convenient than using <code>&lt;%= ... %&gt;</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compiled = _.template(<span class="string">"&lt;% print('Hello ' + epithet); %&gt;"</span>);</span><br><span class="line">compiled(&#123;epithet: <span class="string">"stooge"</span>&#125;);</span><br><span class="line">=&gt; <span class="string">"Hello stooge"</span></span><br></pre></td></tr></table></figure>
<p>If ERB-style delimiters aren’t your cup of tea, you can change Underscore’s template settings to use different symbols to set off interpolated code. Define an interpolate regex to match expressions that should be interpolated verbatim, an escape regex to match expressions that should be inserted after being HTML-escaped, and an evaluate regex to match expressions that should be evaluated without insertion into the resulting string. You may define or omit any combination of the three. For<br>example, to perform Mustache.js-style templating:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_.templateSettings = &#123;</span><br><span class="line">interpolate: <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">var</span> template = _.template(<span class="string">"Hello &#123;&#123; name &#125;&#125;!"</span>);</span><br><span class="line">template(&#123;name: <span class="string">"Mustache"</span>&#125;);</span><br><span class="line">=&gt; <span class="string">"Hello Mustache!"</span></span><br></pre></td></tr></table></figure>
<p>By default, template places the values from your data in the local scope via the with statement. However, you can specify a single variable name with the variable setting. This can significantly improve the speed at which a template is able to render.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.template(<span class="string">"Using 'with': &lt;%= data.answer %&gt;"</span>, &#123;variable: <span class="string">'data'</span>&#125;)(&#123;answer: <span class="string">'no'</span>&#125;);</span><br><span class="line">=&gt; <span class="string">"Using 'with': no"</span></span><br></pre></td></tr></table></figure>
<p>Precompiling your templates can be a big help when debugging errors you can’t reproduce. This is because precompiled templates can provide line numbers and a stack trace, something that is not possible when compiling templates on the client. The source property is available on the compiled template function for easy precompilation.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   JST.project = <span class="xml"><span class="tag">&lt;<span class="title">%=</span> <span class="attribute">_.template</span>(<span class="attribute">jstText</span>)<span class="attribute">.source</span> %&gt;</span>;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>总结一下：</p>
<p><code>&lt;%  %&gt;</code> - to execute some code<br><code>&lt;%= %&gt;</code> - to print some value in template<br><code>&lt;%- %&gt;</code> - to print some values with HTML escaped</p>
<p>jQuery的click()和change()方法不会自动对新添加到dom的元素进行绑定，所以就无法对这一部分元素进行操作。不过on()方法可以，用法如下：</p>
<script src="//gist.github.com/8b4792a31888cc25ef60.js"></script>
<p>太累了。。。改天再做校正。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="强制显示滚动条">强制显示滚动条</h2><p>有时候项目中可能会有这样的需求，需要在一个较小的高度内显示较多的内容，这时就需要使用CSS的溢出隐藏功能，<code>overflow: auto</code>，或者<code>overflow: scroll</code>。有时候，我们希望会出现垂直的滚动条来告诉用户，这个地方有更多的内容在隐藏着，你可以滚动查看这些内容。如果没有滚动条的话，用户也许不会注意到有隐藏的内容。</p>
<p>按照MDN的解释，使用<code>overflow: auto</code>，或者<code>overflow: scroll</code>是会出现滚动条的，但是在OS X下面（Windows未测试）只有把鼠标放到隐藏区域上方才会出现滚动条，这显然是不符合我们的要求的，我们不想让用户错过这些内容。那么，使用下面的方法可以使OS X强制显示垂直滚动条。</p>]]>
    
    </summary>
    
      <category term="技术" scheme="http://niuleipeng.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="杂项" scheme="http://niuleipeng.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
      <category term="技术笔记" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="日常记录" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cannot add or update a child row a foreign key constraint fails]]></title>
    <link href="http://niuleipeng.com/2015/06/24/cannot-add-or-update-a-child-row-a-foreign-key-constraint-fails/"/>
    <id>http://niuleipeng.com/2015/06/24/cannot-add-or-update-a-child-row-a-foreign-key-constraint-fails/</id>
    <published>2015-06-24T10:21:51.000Z</published>
    <updated>2015-06-24T10:42:43.000Z</updated>
    <content type="html"><![CDATA[<p>今天在升级数据库的时候，出现报错信息 “Cannot add or update a child row: a foreign key constraint fails”，看起来是外键关联失败的问题，检查了一下数据库表创建的过程，发现创建表的时候没有关联这个外键，那么为什么现在关联的时候会失败呢？按道理不会出现这样的问题，无奈只好祭出我的Google大法。</p>
<a id="more"></a>
<p>第一条答案是StackOverflow上的一个问题，点进去发现，大概的意思是说，第二张表用来做外键关联的那个键的一些值，在第一张表里面找不到，所以无法关联。我到数据库里面select看了一下，果然，第二个表里面用来关联那个键的一些值是0，而这个键在第一个表里面是id，而id是不能为0的，所以一直关联失败。</p>
<p>由于是测试环境（当然也正是因为测试环境所以才会产生一些“脏数据”）,所以就直接删除了第二个表里面的脏数据，然后就可以成功升级了。</p>
<p>附上StackOverflow答案链接 <a href="http://stackoverflow.com/questions/5005388/cannot-add-or-update-a-child-row-a-foreign-key-constraint-fails" target="_blank" rel="external">cannot-add-or-update-a-child-row-a-foreign-key-constraint-fails</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在升级数据库的时候，出现报错信息 “Cannot add or update a child row: a foreign key constraint fails”，看起来是外键关联失败的问题，检查了一下数据库表创建的过程，发现创建表的时候没有关联这个外键，那么为什么现在关联的时候会失败呢？按道理不会出现这样的问题，无奈只好祭出我的Google大法。</p>]]>
    
    </summary>
    
      <category term="MySQL" scheme="http://niuleipeng.com/tags/MySQL/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术笔记" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[响应式网页设计]]></title>
    <link href="http://niuleipeng.com/2015/06/24/Responsive-Web-Design/"/>
    <id>http://niuleipeng.com/2015/06/24/Responsive-Web-Design/</id>
    <published>2015-06-24T04:36:55.000Z</published>
    <updated>2015-06-25T03:55:39.000Z</updated>
    <content type="html"><![CDATA[<p>响应式网页设计是什么？请参考<a href="https://zh.wikipedia.org/zh/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1" target="_blank" rel="external">响应式网页设计</a></p>
<p>最近公司网站要开发移动版本，所以就去了解了一下响应式设计的相关内容，看了一些文档之后，在这里做一个总结，为接下来的开发做参考。</p>
<p>以下内容来自<strong><a href="http://www.ruanyifeng.com/blog" target="_blank" rel="external">阮一峰老师的博客</a>，<a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html" target="_blank" rel="external">原文链接</a>。</strong></p>
<p>有部分修改，感谢阮一峰老师。</p>
<h2 id="一、”响应式网页设计”的概念">一、”响应式网页设计”的概念</h2><p>2010年，Ethan Marcotte提出了”<a href="http://www.alistapart.com/articles/responsive-web-design/" target="_blank" rel="external">响应式网页设计</a>“（Responsive Web Design）这个名词，指可以自动识别屏幕宽度、并做出相应调整的网页设计。<br>他制作了一个<a href="http://www.alistapart.com/d/responsive-web-design/ex/ex-site-flexible.html" target="_blank" rel="external">范例</a>，里面是《福尔摩斯历险记》六个主人公的头像。如果屏幕宽度大于1300像素，则6张图片并排在一行。</p>
<a id="more"></a>
<p><img src="http://lniu.qiniudn.com/images/posts/2015062401.jpg" alt="one row"></p>
<p>如果屏幕宽度在600像素到1300像素之间，则6张图片分成两行。</p>
<p><img src="http://lniu.qiniudn.com/images/posts/2015062402.jpg" alt="two rows"></p>
<p>如果屏幕宽度在400像素到600像素之间，则导航栏移到网页头部。</p>
<p><img src="http://lniu.qiniudn.com/images/posts/2015062403.jpg" alt="nav to header"></p>
<p>如果屏幕宽度在400像素以下，则6张图片分成三行。</p>
<p><img src="http://lniu.qiniudn.com/images/posts/2015062404.jpg" alt="three rows"></p>
<h2 id="二、_允许宽度自动调整">二、 允许宽度自动调整</h2><p>“响应式网页设计”的实现主要依赖<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag" target="_blank" rel="external">viewport</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="external">CSS media queries</a>。</p>
<p>首先，在网页的头部，加入一行viewport元标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>viewport是网页默认的宽度和高度，上面这行代码的意思是，网页宽度默认等于屏幕宽度（width=device-width)，原始缩放比例（initial-scale=1）为1.0，即网页初始大小占屏幕面积的100%。</p>
<p>所有的主流浏览器都支持这个设置，包括IE9。对于那些老式浏览器（主要是IE6、IE7、IE8）,需要使用<a href="http://code.google.com/p/css3-mediaqueries-js/" target="_blank" rel="external">css-mediaqueries.js</a>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">　　<span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">![endif]--</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="三、不使用绝对宽度">三、不使用绝对宽度</h2><p>由于网页会根据屏幕宽度调整布局，所以不能使用绝对宽度的布局，也不能使用具有绝对宽度的元素。这一条非常重要。<br>具体说，CSS代码不能指定像素宽度：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">width</span>: <span class="tag">xxx</span> <span class="tag">px</span>;</span><br></pre></td></tr></table></figure>
<p>只能指定百分比宽度：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">width</span>: <span class="tag">xx</span>%;</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">width</span>: <span class="tag">auto</span>;</span><br></pre></td></tr></table></figure>
<h2 id="四、相对大小的字体">四、相对大小的字体</h2><p>字体也不能使用绝对大小（px），而只能使用相对大小（em）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font</span>:<span class="value"> normal <span class="number">100%</span> Helvetica, Arial, sans-serif</span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>上面的代码指定，字体大小是页面默认大小的100%，即16像素。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">h1</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">1.5em</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>然后，h1的大小是默认大小的1.5倍，即24像素（24/16=1.5）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">small</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">0.875em</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>small元素的大小是默认大小的0.875倍，即14像素（14/16=0.875）。</p>
<h2 id="五、流动布局">五、流动布局</h2><p><a href="http://www.alistapart.com/articles/fluidgrids/" target="_blank" rel="external">“流动布局”</a>的含义是，各个区块的位置都是浮动的，不是固定不变的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.main</span> <span class="rules">&#123;</span><br><span class="line">　　　<span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;</span><br><span class="line">　　　<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">70%</span></span></span>; </span><br><span class="line">　<span class="rule">&#125;</span></span></span><br><span class="line"><span class="class">.leftBar</span> <span class="rules">&#123;</span><br><span class="line">　　<span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">　　<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p><a href="http://designshack.net/articles/css/everything-you-never-knew-about-css-floats/" target="_blank" rel="external">float</a>的好处是，如果宽度太小，放不下两个元素，后面的元素会自动滚动到前面元素的下方，不会在水平方向overflow（溢出），避免了水平滚动条的出现。<br>另外，绝对定位（position: absolute）的使用，也要非常小心。</p>
<h2 id="六、选择加载CSS">六、选择加载CSS</h2><p>“响应式网页设计”的核心，就是CSS3引入的<a href="http://www.w3.org/TR/CSS21/media.html" target="_blank" rel="external">Media Query</a>。<br>它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span></span><br><span class="line">　　　　<span class="attribute">media</span>=<span class="value">"screen and (max-device-width: 400px)"</span></span><br><span class="line">　　　　<span class="attribute">href</span>=<span class="value">"tinyScreen.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的代码意思是，如果屏幕宽度小于400像素（max-device-width: 400px），就加载tinyScreen.css文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span></span><br><span class="line">　　<span class="attribute">media</span>=<span class="value">"screen and (min-width: 400px) and (max-device-width: 600px)"</span></span><br><span class="line">　　<span class="attribute">href</span>=<span class="value">"smallScreen.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果屏幕宽度在400像素到600像素之间，则加载smallScreen.css文件。<br>除了用html标签加载CSS文件，还可以在现有CSS文件中加载。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">import</span> <span class="function">url</span>(<span class="string">"tinyScreen.css"</span>) screen and (max-device-width: <span class="number">400px</span>)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="七、CSS的@media规则">七、CSS的@media规则</h2><p>同一个CSS文件中，也可以根据不同的屏幕分辨率，选择应用不同的CSS规则。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (max-device-width: <span class="number">400px</span>) </span>&#123;</span><br><span class="line">　　<span class="class">.column</span> <span class="rules">&#123;</span><br><span class="line">　　　　<span class="rule"><span class="attribute">float</span>:<span class="value"> none</span></span>;</span><br><span class="line">　　　　<span class="rule"><span class="attribute">width</span>:<span class="value">auto</span></span>;</span><br><span class="line">　　<span class="rule">&#125;</span></span></span><br><span class="line">　　<span class="id">#sidebar</span> <span class="rules">&#123;</span><br><span class="line">　　　　<span class="rule"><span class="attribute">display</span>:<span class="value">none</span></span>;</span><br><span class="line">　　<span class="rule">&#125;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码意思是，如果屏幕宽度小于400像素，则column块取消浮动（float:none）、宽度自动调节（width:auto），sidebar块不显示（display:none）。</p>
<h2 id="八、图片的自适应（fluid_image）">八、图片的自适应（fluid image）</h2><p>除了布局和文本，”自适应网页设计”还必须实现图片的<a href="http://unstoppablerobotninja.com/entry/fluid-images" target="_blank" rel="external">自动缩放</a>。</p>
<p>这只要一行CSS代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">img</span> <span class="rules">&#123; <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">100%</span></span></span>;<span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>这行代码对于大多数嵌入网页的视频也有效，所以可以写成：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">img</span>, <span class="tag">object</span> <span class="rules">&#123; <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">100%</span></span></span>;<span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>老版本的IE不支持max-width，所以只好写成：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">img</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span> </span></span></span>&#125;</span><br></pre></td></tr></table></figure>
<p>此外，windows平台缩放图片时，可能出现图像失真现象。这时，可以尝试使用IE的<a href="http://css-tricks.com/ie-fix-bicubic-scaling-for-images/" target="_blank" rel="external">专有命令</a>：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">img</span> <span class="rules">&#123; <span class="rule"><span class="attribute">-ms-interpolation-mode</span>:<span class="value"> bicubic</span></span>; <span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>或者，Ethan Marcotte的<a href="http://unstoppablerobotninja.com/demos/resize/imgSizer.js" target="_blank" rel="external">imgSizer.js</a>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addLoadEvent(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">　　<span class="keyword">var</span> imgs = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>).getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">　　imgSizer.collate(imgs);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>不过，有条件的话，最好还是根据不同大小的屏幕，加载不同分辨率的图片。有<a href="http://blog.cloudfour.com/responsive-imgs-part-2/" target="_blank" rel="external">很多方法</a>可以做到这一条，服务器端和客户端都可以实现。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>响应式网页设计是什么？请参考<a href="https://zh.wikipedia.org/zh/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1">响应式网页设计</a></p>
<p>最近公司网站要开发移动版本，所以就去了解了一下响应式设计的相关内容，看了一些文档之后，在这里做一个总结，为接下来的开发做参考。</p>
<p>以下内容来自<strong><a href="http://www.ruanyifeng.com/blog">阮一峰老师的博客</a>，<a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html">原文链接</a>。</strong></p>
<p>有部分修改，感谢阮一峰老师。</p>
<h2 id="一、”响应式网页设计”的概念">一、”响应式网页设计”的概念</h2><p>2010年，Ethan Marcotte提出了”<a href="http://www.alistapart.com/articles/responsive-web-design/">响应式网页设计</a>“（Responsive Web Design）这个名词，指可以自动识别屏幕宽度、并做出相应调整的网页设计。<br>他制作了一个<a href="http://www.alistapart.com/d/responsive-web-design/ex/ex-site-flexible.html">范例</a>，里面是《福尔摩斯历险记》六个主人公的头像。如果屏幕宽度大于1300像素，则6张图片并排在一行。</p>]]>
    
    </summary>
    
      <category term="响应式" scheme="http://niuleipeng.com/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网页设计" scheme="http://niuleipeng.com/tags/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="技术笔记" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[也许是一个新的开始]]></title>
    <link href="http://niuleipeng.com/2015/06/24/new-start/"/>
    <id>http://niuleipeng.com/2015/06/24/new-start/</id>
    <published>2015-06-24T04:11:44.000Z</published>
    <updated>2015-06-24T06:24:20.000Z</updated>
    <content type="html"><![CDATA[<p>对于已经是拖延症晚期的我，拖延似乎已经成了一个无法克服的问题。可怕的习惯。</p>
<p>生活于我，大概是日复一日的重复，当然，我不想要这样的生活。我想要的生活是海阔凭鱼跃，天高任鸟飞。但是拖延症明显是不配得到这种生活的。</p>
<p>懒得说话，懒得社交，我宁可在家宅一个周末，也不愿意出去看一眼美丽的天空。内心似乎在害怕着什么，可是，我在害怕什么呢？</p>
<p>昨晚友人给我发来一个博客，说博客主人与我类似，希望我们交个朋友。我深夜无聊就按图索骥找了一下博客主人的各种信息。其实我对于交朋友没什么兴趣，我不喜欢身边的一些人，那么我就不说话。只是对于一个能够坚持写文字的人感到钦佩，因为我自己做不到。要说没有触动是假的，之前自尊心作祟，博客长期不更所以就把DNS解析停掉了，所以就把自己的博客又翻出来，感觉是时候治一治自己的拖延症了。</p>
<p>那么就从这里开始吧，总要有一个开始不是吗？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于已经是拖延症晚期的我，拖延似乎已经成了一个无法克服的问题。可怕的习惯。</p>
<p>生活于我，大概是日复一日的重复，当然，我不想要这样的生活。我想要的生活是海阔凭鱼跃，天高任鸟飞。但是拖延症明显是不配得到这种生活的。</p>
<p>懒得说话，懒得社交，我宁可在家宅一个]]>
    </summary>
    
      <category term="无聊杂记" scheme="http://niuleipeng.com/tags/%E6%97%A0%E8%81%8A%E6%9D%82%E8%AE%B0/"/>
    
      <category term="随笔" scheme="http://niuleipeng.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔" scheme="http://niuleipeng.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SQL笔记]]></title>
    <link href="http://niuleipeng.com/2015/03/11/sql-note/"/>
    <id>http://niuleipeng.com/2015/03/11/sql-note/</id>
    <published>2015-03-11T02:56:50.000Z</published>
    <updated>2015-06-25T03:57:35.000Z</updated>
    <content type="html"><![CDATA[<p>外来键是一个(或数个)指向另外一个表格主键的栏位。外键的目的是确定资料的参考完整性 (referential integrity)。换言之，只有被准许的资料值才会被存入资料库内。<br><a id="more"></a></p>
<p>举例来说，假设我们有两个表格：一个 CUSTOMER 表格，里面记录了所有顾客的资料；另一个 ORDERS 表格，里面记录了所有顾客订购的资料。在这里的一个限制，就是所有的订购资料中的顾客，都一定是要跟在 CUSTOMER 表格中存在。在这里，我们就会在 ORDERS 表格中设定一个外键，而这个外键是指向 CUSTOMER 表格中的主键。这样一来，我们就可以确定所有在 ORDERS 表格中的顾客都存在 CUSTOMER 表格中。换句话说，ORDERS<br>表格之中，不能有任何顾客是不存在于 CUSTOMER 表格中的资料。</p>
<p>这两个表格的结构将会是如下：</p>
<h2 id="CUSTOMER_表格">CUSTOMER 表格</h2><table>
<thead>
<tr>
<th>栏位</th>
<th style="text-align:left">性质</th>
</tr>
</thead>
<tbody>
<tr>
<td>SID</td>
<td style="text-align:left">主键</td>
</tr>
<tr>
<td>Last_Name</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>First_Name</td>
</tr>
</tbody>
</table>
<h2 id="ORDERS_表格">ORDERS 表格</h2><table>
<thead>
<tr>
<th>栏位</th>
<th style="text-align:left">性质</th>
</tr>
</thead>
<tbody>
<tr>
<td>Order_ID</td>
<td style="text-align:left">主键</td>
</tr>
<tr>
<td>Order_Date</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>Customer_SID</td>
<td style="text-align:left">外键</td>
</tr>
<tr>
<td>Amount</td>
</tr>
</tbody>
</table>
<p>在以上的例子中，ORDERS 表格中的 <code>Customer_SID</code> 栏位是一个指向 CUSTOMER 表格中 <code>SID</code> 栏位的外来键。</p>
<p>以下列出几个在建置 ORDERS 表格时指定外来键的方式： </p>
<h2 id="MySQL">MySQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ORDERS</span><br><span class="line">(Order_ID <span class="built_in">integer</span>,</span><br><span class="line">Order_Date <span class="built_in">date</span>,</span><br><span class="line">Customer_SID <span class="built_in">integer</span>,</span><br><span class="line">Amount <span class="keyword">double</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (Order_ID),</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Customer_SID) <span class="keyword">REFERENCES</span> CUSTOMER (SID));</span></span><br></pre></td></tr></table></figure>
<h2 id="Oracle">Oracle</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ORDERS</span><br><span class="line">(Order_ID <span class="built_in">integer</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">Order_Date <span class="built_in">date</span>,</span><br><span class="line">Customer_SID <span class="built_in">integer</span> <span class="keyword">REFERENCES</span> CUSTOMER (SID),</span><br><span class="line">Amount <span class="keyword">double</span>);</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL_Server">SQL Server</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ORDERS</span><br><span class="line">(Order_ID <span class="built_in">integer</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">Order_Date datetime,</span><br><span class="line">Customer_SID <span class="built_in">integer</span> <span class="keyword">REFERENCES</span> CUSTOMER (SID),</span><br><span class="line">Amount <span class="keyword">double</span>);</span></span><br></pre></td></tr></table></figure>
<p>以下的例子则是借着改变表格架构来指定外键。这里假设 ORDERS 表格已经被建立，而外键尚未被指定： </p>
<h2 id="MySQL-1">MySQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ORDERS</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Customer_SID) <span class="keyword">REFERENCES</span> CUSTOMER (SID);</span></span><br></pre></td></tr></table></figure>
<h2 id="Oracle-1">Oracle</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ORDERS</span><br><span class="line"><span class="keyword">ADD</span> (<span class="keyword">CONSTRAINT</span> fk_orders1) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Customer_SID) <span class="keyword">REFERENCES</span> CUSTOMER (SID);</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL_Server-1">SQL Server</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ORDERS</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Customer_SID) <span class="keyword">REFERENCES</span> CUSTOMER (SID);</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>外来键是一个(或数个)指向另外一个表格主键的栏位。外键的目的是确定资料的参考完整性 (referential integrity)。换言之，只有被准许的资料值才会被存入资料库内。<br>]]>
    
    </summary>
    
      <category term="SQL" scheme="http://niuleipeng.com/tags/SQL/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术笔记" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript笔记]]></title>
    <link href="http://niuleipeng.com/2015/03/09/js-note/"/>
    <id>http://niuleipeng.com/2015/03/09/js-note/</id>
    <published>2015-03-09T13:24:14.000Z</published>
    <updated>2015-07-03T11:26:51.000Z</updated>
    <content type="html"><![CDATA[<p>向下取整:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = ~~<span class="number">1.2</span>; <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p>这个补充一下，还可以用位右移符&gt;&gt;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3.4</span>&gt;&gt;<span class="number">0</span>; <span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<p>但是两者最好都只用在正整数上，因为只是舍掉了小数部分。Math.floor(-1.2)应该为-2，这两种方法的结果为-1</p>
<a id="more"></a>
<p>转数字</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = + <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure>
<p>设默认值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(bar)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foobar = bar || <span class="string">'default'</span>; </span><br><span class="line"><span class="comment">//bar 为 undefined, null, "", 0, false, NaN 时最后都得到'default'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//坑</span></span><br><span class="line">[]||<span class="string">"aa"</span>; <span class="comment">//[]</span></span><br><span class="line">&#123;&#125;||<span class="string">"aa"</span>; <span class="comment">//SyntaxError</span></span><br><span class="line">(&#123;&#125;)||<span class="string">"aa"</span>;<span class="comment">//Object &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>NaN的坑</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NaN - 不是一个数字</span></span><br><span class="line"><span class="built_in">isNaN</span>(a);</span><br><span class="line"><span class="comment">//检查是不是 "不是一个数字" ..</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">null</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//实际上是null被转为0了,表面上"null 不是一个 不是数字 的东西"。wtf...</span></span><br></pre></td></tr></table></figure>
<p>UNICODE 用作变量名</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> \u4f60\u597d = <span class="string">"\u4f60\u597d"</span>;</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line">b.\u4f60\u597d = \u4f60\u597d;</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//Object &#123;你好: "你好"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b.你好);<span class="comment">// "你好"</span></span><br><span class="line"><span class="built_in">console</span>.log(b.\u4f60\u597d);<span class="comment">// "你好"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"你"</span>===<span class="string">"\u4f60"</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>数组传递和复制</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="keyword">delete</span> b[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[1, undefined × 1, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">delete</span> b[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//[4, undefined × 1,6]</span></span><br></pre></td></tr></table></figure>
<p>对象与Function</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>);<span class="comment">//"function"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>);<span class="comment">//"function"</span></span><br></pre></td></tr></table></figure>
<p>函数声明</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aa();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">bb();</span><br><span class="line"><span class="keyword">var</span> bb = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="comment">//TypeError</span></span><br></pre></td></tr></table></figure>
<p>toString()</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>toString();<span class="comment">//SyntaxError</span></span><br><span class="line"><span class="number">2</span> .toString(); <span class="comment">//"2"</span></span><br><span class="line"><span class="number">2.</span>.toString(); <span class="comment">//"2"</span></span><br><span class="line">(<span class="number">2</span>).toString(); <span class="comment">//"2"</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="string">"abc"</span>,<span class="string">""</span>,<span class="number">0</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="literal">false</span>,<span class="literal">NaN</span>],<span class="number">3</span>].toString();</span><br><span class="line"><span class="comment">//"1,2,abc,,0,,,false,NaN,3"</span></span><br></pre></td></tr></table></figure>
<p>for in 暴露原型链属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.foo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.bar = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(p);<span class="comment">//bar,foo 都遍历出来了。可以用hasOwnProperty()过滤原型链属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>switch代替if else</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">    <span class="keyword">case</span> (a &gt; <span class="number">10</span>):  </span><br><span class="line">                do_something();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> (a &lt; <span class="number">100</span>):  </span><br><span class="line">                others();  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">                ;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>以上内容来自<a href="http://www.zhihu.com/people/mc-zone" target="_blank" rel="external">马铖</a>,感谢！</p>
<h2 id="JavaScript中逗号的特性">JavaScript中逗号的特性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// return 3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,alert)(<span class="string">"hello wolrd"</span>);</span><br><span class="line"><span class="comment">// return "hello world"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line"><span class="comment">// return 2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>][<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="comment">// return 3</span></span><br></pre></td></tr></table></figure>
<p>逗号运算符，多个表达式可以用逗号隔开，其中用逗号隔开的表达式的值分别计算，但整个表达式的值时最后一个表达式的值。</p>
<h2 id="JavaScript的闭包">JavaScript的闭包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = ( <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bar = <span class="string">'bar'</span>;</span><br><span class="line">    <span class="comment">// "闭包" 内的函数可以访问 bar 变量，而 bar 变量对于外部却是隐藏的</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        get_bar: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> foo;</span><br><span class="line">        &#125;,</span><br><span class="line">        update_bar: <span class="function"><span class="keyword">function</span><span class="params">(new_bar)</span> </span>&#123;</span><br><span class="line">            bar = new_bar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;() );</span><br><span class="line"></span><br><span class="line">foo.get_bar(); <span class="comment">// get 'bar'</span></span><br><span class="line">foo.bar; <span class="comment">// Error</span></span><br><span class="line">foo.update_bar(<span class="string">'new bar'</span>); <span class="comment">//update bar</span></span><br><span class="line">foo.get_bar(); <span class="comment">// get new bar</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>之所以可能通过这种方式在JavaScript种实现公有，私有，特权变量正是因为闭包，闭包是指在JavaScript中，内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后。</p>
</blockquote>
<p>需要注意的一点时，内部函数访问的是被创建的内部变量本身，而不是它的拷贝。所以在闭包函数内加入 loop 时要格外注意。另外当然的是，闭包特性也可以用于创建私有函数或方法。</p>
<p>关于为什么在 JavaScript 中闭包的应用都有关键词“return”，引用 JavaScript 秘密花园中的一段话：</p>
<blockquote>
<p>闭包是 JavaScript 一个非常重要的特性，这意味着当前作用域总是能够访问外部作用域中的变量。 因为 函数 是 JavaScript 中唯一拥有自身作用域的结构，因此闭包的创建依赖于函数。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>向下取整:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = ~~<span class="number">1.2</span>; <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p>这个补充一下，还可以用位右移符&gt;&gt;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3.4</span>&gt;&gt;<span class="number">0</span>; <span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<p>但是两者最好都只用在正整数上，因为只是舍掉了小数部分。Math.floor(-1.2)应该为-2，这两种方法的结果为-1</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://niuleipeng.com/tags/JavaScript/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术笔记" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS笔记]]></title>
    <link href="http://niuleipeng.com/2015/03/09/css-note/"/>
    <id>http://niuleipeng.com/2015/03/09/css-note/</id>
    <published>2015-03-09T08:52:59.000Z</published>
    <updated>2015-06-24T06:44:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="用Margin还是用Padding">用Margin还是用Padding</h2><h3 id="何时应当使用margin：">何时应当使用margin：</h3><ul>
<li>需要在border外侧添加空白时。</li>
<li>空白处不需要背景（色）时。</li>
<li>上下相连的两个盒子之间的空白，需要相互抵消时。如15px + 20px的margin，将得到20px的空白。</li>
</ul>
<a id="more"></a>
<h3 id="何时应当时用padding：">何时应当时用padding：</h3><ul>
<li>需要在border内测添加空白时。</li>
<li>空白处需要背景（色）时。</li>
<li>上下相连的两个盒子之间的空白，希望等于两者之和时。如15px + 20px的padding，将得到35px的空白。<h2 id="margin在块元素、内联元素中的区别">margin在块元素、内联元素中的区别</h2></li>
</ul>
<p>HTML（这里说的是html标准，而不是xhtml）里分两种基本元素，即block和inline。顾名思义，block元素就是以”块”表现的元素（block-like elements），inline元素即是以”行”表现的元素（character level elements and text strings）。二者表现的主要差别在于，在页面文档中block元素另起一行开始，并独占一行。inline元素则同其它inline元素共处一行。</p>
<p>block元素（块元素）大致有：P | H1 | H2 | H3 | H4 | H5 | H6 | UL | OL | PRE | DL | DIV | NOSCRIPT | BLOCKQUOTE | FORM | HR | TABLE | FIELDSET | ADDRESS(随着html5标准的推进，一些元素将被废除，而一些新的元素将被引入)注意的是并非所有的block元素的默认display属性都是block，像table这种display:table的元素也是block元素。</p>
<p>inline元素（内联元素）大致有：#PCDATA（即文本）| TT | I | B | BIG | SMALL|EM | STRONG | DFN | CODE |SAMP | KBD | VAR | CITE | ABBR | ACRONYM|A | IMG | OBJECT | BR | SCRIPT | MAP | Q | SUB | SUP | SPAN | BDO|INPUT | SELECT | TEXTAREA | LABEL | BUTTON</p>
<p>其中有类特殊的元素：如img | input | select | textarea | button | label等，它们被称为可置换元素（Replaced element）。它们区别一般inline元素（相对而言，称non-replaced element）是：这些元素拥有内在尺寸(intrinsic dimensions),它们可以设置width/height属性。它们的性质同设置了display:inline-block的元素一致。</p>
<p>或许有朋友对非置换元素（non-replaced element）有点疑惑，稍微帮助大家理解一下。非置换元素，W3C 中没有给出明确的定义，但我们从字面可以理解到，非置换元素对应着置换元素（replaced element），也就是说我们搞懂了置换元素的含义，就懂了非置换元素。置换元素，W3C中给出了定义：</p>
<blockquote>
<p>An element that is outside the scope of the CSS formatter, such as an image, embedded document, or applet</p>
</blockquote>
<p>从定义中我们可以理解到，置换元素（replaced element）主要是指 img, input, textarea, select, object 等这类默认就有 CSS 格式化外表范围的元素。进而可知，非置换元素（non-replaced element）就是除了 img, input, textarea, select, object 等置换元素以外的元素。</p>
<p>margin在块级元素下，它的性能可以完全体现，上下左右任你设定。且记住块级元素的margin的参照基准是前一个元素即相对于自身之前的元素有margin距离。如果元素是第一个元素，则就是相对于父元素的margin距离（但第一个元素相对于父元素margin-top而父元素又没有设定padding-top/border-top的话要需要印证上面的垂直外边距合并的知识）</p>
<p>margin也能用于内联元素，这是规范所允许的，但是margin-top和margin-bottom对内联元素（对行）的高度没有影响，并且由于边界效果(margin效果)是透明的，它也没有任何的视觉影响。</p>
<p>这是因为边界应用于内联元素时不改变元素的行高度，如果你要改变内联元素的行高即类似文本的行间距，那么你只能使用这三个属性：line-height，fong-size，vertical-align。请记住，这个影响内联元素高度的是line-height而不是height，因为内联元素是一行行的，定一个height的话，那这到底是整段inline元素的高呢？还是inline元素一行的高呢？这都说不准，所以统一都给每行定一个高，只能是line-height了。</p>
<p>margin-top/margin-bottom对内联元素没有多大实际效果，不过margin-left/margin-right还是能够对内联元素产生影响的。应用margin:10px 20px 30px 40px;，左边这个css如果写在inline元素上，它的效果大致是，上下无效果，左边离它相邻元素或者文本距离为40px，右边离它相邻元素或者文本距离为20px。你可以自行尝试一番。</p>
<p>最后在内联元素中还有上文我们提到的非可置换inline元素（non-replaced element），这些个元素img|input|select|textarea|button|label虽然是内联元素，但margin依旧可以影响到它的上下左右！</p>
<p>总结下来margin 属性可以应用于几乎所有的元素，除了表格显示类型（不包括 table-caption, table and inline-table）的元素，而且垂直外边距对非置换内联元素（non-replaced inline element）不起作用。</p>
<h2 id="常见的浏览器下margin出现的bug">常见的浏览器下margin出现的bug</h2><p>总结一些浏览器中常见的margin Bug吧，以后遇到margin下的布局问题可以查看这里找到解决的方案，如果你还发现其它关于浏览器下margin的Bug你可以发表留言，核对采纳后我会及时添加进去，感谢你的分享：</p>
<h3 id="IE6中双边距Bug：">IE6中双边距Bug：</h3><p>发生场合：当给父元素内第一个浮动元素设置margin-left（元素float:left）或margin-right（元素float:right）时margin加倍。<br>解决方法：是给浮动元素加上display:inline;CSS属性；或者用padding-left代替margin-left。<br>原理分析：块级对象默认的display属性值是block，当设置了浮动的同时，还设置了它的外边距就会出现这种情况。也许你会问：“为什么之后的对象和第一个对象之间就不存在双倍边距的Bug”？因为浮动都有其相对应的对象，只有相对于其父对象的浮动对象才会出现这样的问题。第一个对象是相对父对象的，而之后对象是相对第一个对象的，所以之后对象在设置后不会出现问题。为什么display:inline可以解决这个双边距bug，首先是inline元素或inline-block元素是不存在双边距问题的。然后，float:left等浮动属性可以让inline元素haslayout，会让inline元素表现得跟inline-block元素的特性一样，支持高宽，垂直margin和padding等，所以div<br>class的所有样式可以用在这个display inline的元素上。</p>
<h3 id="IE6中浮动元素3px间隔Bug：">IE6中浮动元素3px间隔Bug：</h3><p>发生场合：发生在一个元素浮动，然后一个不浮动的元素自然上浮与之靠近会出现的3px的bug。<br>解决方法：右边元素也一起浮动；或者为右边元素添加IE6 Hack _margin-left:-3px;从而消除3px间距。<br>原理分析：IE6浏览器缺陷Bug。</p>
<h3 id="IE6/7负margin隐藏Bug：">IE6/7负margin隐藏Bug：</h3><p>发生场合：当给一个有hasLayout的父元素内的非hasLayout元素设置负margin时，超出父元素部分不可见。<br>解决方法：去掉父元素的hasLayout；或者赋hasLayout给子元素,并添加position:relative;<br>原理分析：IE6/7独有的hasLayout产生问题。</p>
<h3 id="IE6/7下ul/ol标记消失bug：">IE6/7下ul/ol标记消失bug：</h3><p>发生场合：当ul/ol触发了haslayout并且是在ul/ol上写margin-left，前面默认的ul/ol标记会消失。<br>解决方法：给li设置margin-left，而不是给ul/ol设置margin-left。<br>原理分析：IE6/7浏览器Bug</p>
<h3 id="IE6/7下margin与absolute元素重叠bug：">IE6/7下margin与absolute元素重叠bug：</h3><p>发生场合：双栏自适应布局中，左侧元素absolute绝对定位，右侧的margin撑开距离定位。在IE6/7下左侧应用了absolute属性的块级元素与右边的自适应的文字内容重叠。<br>解决方法：把左侧块级元素更改为内联元素，比如把div更换为span。<br>原理分析：这是由于IE6/IE7浏览器将inline水平标签元素和block水平的标签元素没有加以区分一视同仁渲染了。属于IE6/7浏览器渲染Bug。</p>
<h3 id="IE6/7/8下auto_margin居中bug：">IE6/7/8下auto margin居中bug：</h3><p>发生场合：给block元素设置margin auto无法居中<br>解决方法：出现这种bug的原因通常是没有Doctype，然后触发了ie的quirks mode，加上Doctype声明就可以了。在《打败IE的葵花宝典》里给出的方法是给block元素添加一个width能够解决，但根据本人亲测，加with此种方法是无效的，如果没有Doctype即使给元素添加width也无法让block元素居中。<br>原理分析：缺少Doctype声明。</p>
<h3 id="IE8下input[button_|_submit]_设置margin:auto无法居中">IE8下input[button | submit] 设置margin:auto无法居中</h3><p>发生场合：ie8下，如果给像button这样的标签（如button input[type=”button”] input[type=”submit”]）设置{ display: block; margin:0 auto; }如果不设置宽度的话无法居中。<br>解决方法：可以给为input加上宽度<br>原理分析：IE8浏览器Bug。</p>
<h3 id="IE8百分比padding垂直margin_bug：">IE8百分比padding垂直margin bug：</h3><p>发生场合：当父元素设置了百分比的padding，子元素有垂直的margin的时候，就好像父元素被设置了margin一样。<br>解决方法：给父元素加一个overflow:hidden/auto。<br>原理分析：IE8浏览器Bug。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="用Margin还是用Padding">用Margin还是用Padding</h2><h3 id="何时应当使用margin：">何时应当使用margin：</h3><ul>
<li>需要在border外侧添加空白时。</li>
<li>空白处不需要背景（色）时。</li>
<li>上下相连的两个盒子之间的空白，需要相互抵消时。如15px + 20px的margin，将得到20px的空白。</li>
</ul>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://niuleipeng.com/tags/CSS/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术笔记" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML学习笔记]]></title>
    <link href="http://niuleipeng.com/2015/03/08/html-note/"/>
    <id>http://niuleipeng.com/2015/03/08/html-note/</id>
    <published>2015-03-08T13:29:06.000Z</published>
    <updated>2015-06-24T06:44:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="《Head_First_HTML_CSS_And_XHTML》">《Head First HTML CSS And XHTML》</h1><hr>
<ul>
<li>如果有多个<code>&lt;a&gt;</code>元素含有对象(target),如果<code>target</code>的值都为 <code>_blank</code>,那么所有的页面都在单独的新页面中打开；如果<code>target</code>的值不是<code>_target</code>,而是一个统一的值,比如<code>foo</code>,那么第一个点击的链接将在新页面中打开,记作页面<strong>a</strong>,其余的<code>target</code>值为<code>foo</code>的页面都将在页面<strong>a</strong>中打开.因为<code>_blank</code>是一个特例,它总是告诉浏览器打开一个新的窗口.</li>
</ul>
<a id="more"></a>
<ul>
<li>可以使用<code>&lt;a id=”foo”&gt;Foo&lt;/a&gt;</code>为Foo字符串定义一个目标锚,然后通过<code>&lt;a href=”url#foo”&gt;Bar&lt;/a&gt;</code>来进行跳转;</li>
<li>为<code>&lt;a&gt;</code>元素添加<code>&lt;title&gt;</code>属性,帮助浏览器和屏幕阅读器识别;</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="《Head_First_HTML_CSS_And_XHTML》">《Head First HTML CSS And XHTML》</h1><hr>
<ul>
<li>如果有多个<code>&lt;a&gt;</code>元素含有对象(target),如果<code>target</code>的值都为 <code>_blank</code>,那么所有的页面都在单独的新页面中打开；如果<code>target</code>的值不是<code>_target</code>,而是一个统一的值,比如<code>foo</code>,那么第一个点击的链接将在新页面中打开,记作页面<strong>a</strong>,其余的<code>target</code>值为<code>foo</code>的页面都将在页面<strong>a</strong>中打开.因为<code>_blank</code>是一个特例,它总是告诉浏览器打开一个新的窗口.</li>
</ul>]]>
    
    </summary>
    
      <category term="html" scheme="http://niuleipeng.com/tags/html/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术笔记" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VIM笔记]]></title>
    <link href="http://niuleipeng.com/2015/03/08/vim-note/"/>
    <id>http://niuleipeng.com/2015/03/08/vim-note/</id>
    <published>2015-03-08T05:11:14.000Z</published>
    <updated>2015-06-24T10:47:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="VIM中的多行删除">VIM中的多行删除</h2><h3 id="方法1：">方法1：</h3><p>多行删除 <code>:1,10d</code></p>
<h3 id="方法2：">方法2：</h3><p>光标所在行，<code>dd</code><br>光标所在行以下的N行 <code>Ndd</code></p>
<h2 id="VIM中的多行复制">VIM中的多行复制</h2><a id="more"></a>
<h3 id="方法_1：">方法 1：</h3><p>光标放到第6行,<br>输入 <code>2yy</code><br>光标放到第9行，<br>输入 <code>p</code><br>此方法适合复制少量行文本的情况，复制第6行（包括）下面的2行数据，放到第9行下面。</p>
<h3 id="方法_2：">方法 2：</h3><p>正常模式下输入 <code>:6,9 co 12</code><br>复制第6行到第9行之间的内容到第12行后面。</p>
<h3 id="方法_3：">方法 3：</h3><p>有时候不想费劲看多少行或复制大量行时，可以使用标签来替代<br>光标移到起始行，输入<code>ma</code><br>光标移到结束行，输入<code>mb</code><br>光标移到粘贴行，输入<code>mc</code><br>然后 <code>:&#39;a,&#39;b co &#39;c</code><br>把 <code>co</code> 改成 <code>m</code> 就是剪切了</p>
<h2 id="Vim常用笔记">Vim常用笔记</h2><h3 id="光标命令">光标命令</h3><p><code>k,j,h,l</code> —— 上下左右光标移动命令，虽然可以在Linux中使用键盘右边的四个光标键， 但是记住这四个命令还有非常有用的，也就是右手在键盘上放置的位置部分<br><code>nG</code> —— n为行数，该命令立即使光标跳到指定行。<br><code>Ctrl+g</code> —— 光标所在位置的行数和列数报告<br><code>w,b</code> —— 使光标向前或向后跳过一个单词</p>
<h3 id="编辑命令">编辑命令</h3><p><code>i,a,r</code> —— 在光标的前,后,上方插入字符命令(i=insert,a=append,r=replace)<br><code>cw,dw</code> —— 改变(置换)/删除光标所在处的单词的命令 (c=change,d=delete)<br><code>x,d$,dd</code> —— 删除一个字符，光标所在处到行尾的所有字符，和整行的命令</p>
<h3 id="查找命令">查找命令</h3><p><code>/string, ?string</code> —— 从光标所在处向后/向前查找相应的字符串的命令</p>
<h3 id="在打开一个文件编辑后才知道登录的用户对该文件没有写权，不能存盘">在打开一个文件编辑后才知道登录的用户对该文件没有写权，不能存盘</h3><p><code>:w /tmp/1</code> —— 既然没法存盘，不想放弃所做的所有修改，先临时存到/tmp/1<br><code>:20,59w /tmp/1</code> —— 或者仅仅把第20到59行之间的内容存盘成文件/tmp/1</p>
<h3 id="Vim_删除技巧">Vim 删除技巧</h3><p><code>Ctrl+g</code> —— 把光标移到需要删除的行的处按ctrl+g显示行号，再到结尾处再按Ctrl+g<br><code>:23,1045d</code> 假定两次行号为23和1045，则把这几间的内容全删除 </p>
<p>也可以在开始和结束两行中用<code>ma</code>,<code>mb</code>命令标记后用<code>:&#39;a,&#39;bd</code>删除.</p>
<h3 id="Vim_字符串替换命令">Vim 字符串替换命令</h3><p><code>:1,$s/^/string/</code> 在文件的第一行至最后一行的行首前插入string<br><code>:%s/$/string/g</code> 在整个文件每一行的行尾添加string<br><code>:%s/string1/string2/g</code> 在整个文件中替换string1成string2<br><code>:3,7s/string1/string2/</code> 仅替换文件中的第三到七行中的string1成string2 </p>
<h4 id="Note:_s为substitute,%表示所有行,g表示global">Note: s为substitute,%表示所有行,g表示global</h4><h3 id="同时编辑两个文件,在两个文件中拷贝剪贴文本">同时编辑两个文件,在两个文件中拷贝剪贴文本</h3><p><code>vim file1 file2</code><br><code>yy</code> 同时打开两个文件,在文件1的光标所在处拷贝所在行<br><code>:n</code> 切换到文件2 (n=next)<br><code>p</code> 在文件2的光标所在处粘贴所拷贝的行<br><code>:N</code> 切换回文件1</p>
<h3 id="替换文件中的路径">替换文件中的路径</h3><p><code>:%s#/usr/bin#/bin#g</code> 把文件中所有路径/usr/bin换成/bin<br>或者用<br><code>:%s//usr/bin//bin/g</code> 在’/‘前用符号指出’/‘是真的单个字符’/‘</p>
<h3 id="用_Vim_多行注释">用 Vim 多行注释</h3><p>如果要给多行程序作注释，一个笨办法就是 插入 # ,然后用 j 跳到下一行用 <code>.</code> 命令,重复上个命令。如果要注释几百行，一个聪明的办法是：<br><code>:.,+499s/^/#/g</code><br>若需全文的行首插入可用以下命令<br><code>:%s/^/#/g</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="VIM中的多行删除">VIM中的多行删除</h2><h3 id="方法1：">方法1：</h3><p>多行删除 <code>:1,10d</code></p>
<h3 id="方法2：">方法2：</h3><p>光标所在行，<code>dd</code><br>光标所在行以下的N行 <code>Ndd</code></p>
<h2 id="VIM中的多行复制">VIM中的多行复制</h2>]]>
    
    </summary>
    
      <category term="VIM" scheme="http://niuleipeng.com/tags/VIM/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术笔记" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown 语法]]></title>
    <link href="http://niuleipeng.com/2015/03/08/markdown-synatx/"/>
    <id>http://niuleipeng.com/2015/03/08/markdown-synatx/</id>
    <published>2015-03-08T03:15:14.000Z</published>
    <updated>2015-06-24T06:27:30.000Z</updated>
    <content type="html"><![CDATA[<p>&lt;&lt; <a href="http://wowubuntu.com" target="_blank" rel="external">访问 Wow!Ubuntu</a></p>
<p><strong>NOTE:</strong> This is Simplelified  Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Markdown: Syntax</a>.</p>
<p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://markdown.tw/" target="_blank" rel="external">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md" target="_blank" rel="external">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md" target="_blank" rel="external">查看这里</a> 。」—By @<a href="http://twitter.com/riku" target="_blank" rel="external">riku</a></p>
<p><strong>注：</strong> 本项目托管于 <a href="http://gitcafe.com/riku/Markdown-Syntax-CN/" target="_blank" rel="external">GitCafe</a>上，请通过”派生”和”合并请求”来帮忙改进本项目。</p>
<a id="more"></a>
<h1 id="Markdown_语法说明_(简体中文版)_/_(点击查看快速入门)">Markdown 语法说明 (简体中文版) / (<a href="./basic.html">点击查看快速入门</a>)</h1><ul>
<li><p><a href="#overview">概述</a></p>
<ul>
<li>&emsp;&emsp;<a href="#philosophy">宗旨</a></li>
<li>&emsp;&emsp;<a href="#html">兼容 HTML</a></li>
<li>&emsp;&emsp;<a href="#autoescape">特殊字符自动转换</a></li>
</ul>
</li>
<li><p><a href="#block">区块元素</a></p>
<ul>
<li>&emsp;&emsp;<a href="#p">段落和换行</a></li>
<li>&emsp;&emsp;<a href="#h3">标题</a></li>
<li>&emsp;&emsp;<a href="#blockquote">区块引用</a></li>
<li>&emsp;&emsp;<a href="#list">列表</a></li>
<li>&emsp;&emsp;<a href="#precode">代码区块</a></li>
<li>&emsp;&emsp;<a href="#hr">分隔线</a></li>
</ul>
</li>
<li><a href="#span">区段元素</a><ul>
<li>&emsp;&emsp;<a href="#link">链接</a></li>
<li>&emsp;&emsp;<a href="#em">强调</a></li>
<li>&emsp;&emsp;<a href="#code">代码</a></li>
<li>&emsp;&emsp;<a href="#img">图片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a><ul>
<li>&emsp;&emsp;<a href="#backslash">反斜杠</a></li>
<li>&emsp;&emsp;<a href="#autolink">自动链接</a></li>
</ul>
</li>
<li><a href="#acknowledgement">感谢</a></li>
<li><a href="#editor">Markdown 免费编辑器</a></li>
</ul>
<hr>
<h2 id="overview">概述</h2>

<h3 id="philosophy">宗旨</h3>

<p>Markdown 的目标是实现「易读易写」。</p>
<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external">atx</a>、<a href="http://textism.com/tools/textile/" target="_blank" rel="external">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="external">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="external">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/" target="_blank" rel="external">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p>
<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>
<h3 id="html">兼容 HTML</h3>

<p>Markdown 语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p>
<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>
<p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p>
<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>
<pre><code>这是一个普通段落。

<span class="tag">&lt;<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>

这是另一个普通段落。
</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p>
<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>
<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>
<h3 id="autoescape">特殊字符自动转换</h3>

<p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>
<p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p>
<pre><code><span class="string">http:</span><span class="comment">//images.google.com/images?num=30&amp;q=larry+bird</span>
</code></pre><p>你必须要把网址转换写为：</p>
<pre><code><span class="string">http:</span><span class="comment">//images.google.com/images?num=30&amp;amp;q=larry+bird</span>
</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p>
<p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p>
<p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p>
<pre><code>&amp;<span class="keyword">copy</span>;
</code></pre><p>Markdown 会保留它不动。而若你写：</p>
<pre><code><span class="built_in">AT</span>&amp;T
</code></pre><p>Markdown 就会将它转为：</p>
<pre><code><span class="built_in">AT</span>&amp;amp;T
</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p>
<pre><code>4 &lt; 5
</code></pre><p>Markdown 将会把它转换为：</p>
<pre><code><span class="number">4</span> &amp;<span class="keyword">lt</span>; <span class="number">5</span>
</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>
<hr>
<h2 id="block">区块元素</h2>


<h3 id="p">段落和换行</h3>

<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>
<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p>
<p>如果你<em>确实</em>想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p>
<p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引用</a> 和多段落的 <a href="#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>
<h3 id="h3">标题</h3>

<p>Markdown 支持两种标题的语法，类 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external">Setext</a> 和类 <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external">atx</a> 形式。</p>
<p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p>
<pre><code><span class="header">This is an H1
=============</span>

<span class="header">This is an H2
-------------</span>
</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>
<p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p>
<pre><code><span class="preprocessor"># 这是 H1</span>

<span class="preprocessor">## 这是 H2</span>

<span class="preprocessor">###### 这是 H6</span>
</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<pre><code><span class="preprocessor"># 这是 H1 #</span>

<span class="preprocessor">## 这是 H2 ##</span>

<span class="preprocessor">### 这是 H3 ######</span>
</code></pre><h3 id="blockquote">区块引用 Blockquotes</h3>

<p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lo<span class="comment">rem ipsum dolor sit amet,</span>
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla <span class="flow">in</span>, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lo<span class="comment">rem ipsum dolor sit amet,</span>
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla <span class="flow">in</span>, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p>
<pre><code>&gt; This <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">first</span> level <span class="keyword">of</span> quoting.
&gt;
&gt; &gt; This <span class="keyword">is</span> nested blockquote.
&gt;
&gt; Back <span class="keyword">to</span> <span class="keyword">the</span> <span class="keyword">first</span> level.
</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<pre><code>&gt; <span class="comment">## 这是一个标题。</span>
&gt; 
&gt; <span class="number">1</span>.   这是第一行列表项。
&gt; <span class="number">2</span>.   这是第二行列表项。
&gt; 
&gt; 给出一些例子代码：
&gt; 
&gt;     <span class="built_in">return</span> shell_<span class="built_in">exec</span>(<span class="string">"echo <span class="variable">$input</span> | <span class="variable">$markdown_script</span>"</span>);
</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p>
<h3 id="list">列表</h3>

<p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<pre><code><span class="bullet">*   </span>Red
<span class="bullet">*   </span>Green
<span class="bullet">*   </span>Blue
</code></pre><p>等同于：</p>
<pre><code><span class="bullet">+   </span>Red
<span class="bullet">+   </span>Green
<span class="bullet">+   </span>Blue
</code></pre><p>也等同于：</p>
<pre><code>-<span class="ruby">   <span class="constant">Red</span>
</span>-<span class="ruby">   <span class="constant">Green</span>
</span>-<span class="ruby">   <span class="constant">Blue</span></span>
</code></pre><p>有序列表则使用数字接着一个英文句点：</p>
<pre><code><span class="bullet">1.  </span>Bird
<span class="bullet">2.  </span>McHale
<span class="bullet">3.  </span>Parish
</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>
<pre><code><span class="tag">&lt;<span class="title">ol</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>McHale<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>Parish<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ol</span>&gt;</span>
</code></pre><p>如果你的列表标记写成：</p>
<pre><code><span class="bullet">1.  </span>Bird
<span class="bullet">1.  </span>McHale
<span class="bullet">1.  </span>Parish
</code></pre><p>或甚至是：</p>
<pre><code><span class="bullet">3. </span>Bird
<span class="bullet">1. </span>McHale
<span class="bullet">8. </span>Parish
</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>
<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>
<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>
<pre><code>*   Lo<span class="comment">rem ipsum dolor sit amet, consectetuer adipiscing elit.</span>
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla <span class="flow">in</span>, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>但是如果你懒，那也行：</p>
<pre><code>*   Lo<span class="comment">rem ipsum dolor sit amet, consectetuer adipiscing elit.</span>
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla <span class="flow">in</span>, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code><br>标签包起来，举例来说：</p>
<pre><code><span class="bullet">*   </span>Bird
<span class="bullet">*   </span>Magic
</code></pre><p>会被转换为：</p>
<pre><code><span class="tag">&lt;<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>Magic<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</code></pre><p>但是这个：</p>
<pre><code><span class="bullet">*   </span>Bird

<span class="bullet">*   </span>Magic
</code></pre><p>会被转换为：</p>
<pre><code><span class="tag">&lt;<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Bird<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Magic<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>
<pre><code><span class="number">1</span>.  This is a list item with two paragraphs. Lo<span class="comment">rem ipsum dolor</span>
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla <span class="flow">in</span>, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

<span class="number">2</span>.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>
<pre><code>*   This <span class="keyword">is</span> a <span class="type">list</span> <span class="property">item</span> <span class="keyword">with</span> two <span class="property">paragraphs</span>.

    This <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">second</span> <span class="property">paragraph</span> <span class="keyword">in</span> <span class="keyword">the</span> <span class="type">list</span> <span class="property">item</span>. You're
only required <span class="keyword">to</span> indent <span class="keyword">the</span> <span class="keyword">first</span> line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another <span class="property">item</span> <span class="keyword">in</span> <span class="keyword">the</span> same <span class="type">list</span>.
</code></pre><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p>
<pre><code>*   A <span class="type">list</span> <span class="property">item</span> <span class="keyword">with</span> a blockquote:

    &gt; This <span class="keyword">is</span> a blockquote
    &gt; inside a <span class="type">list</span> <span class="property">item</span>.
</code></pre><p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p>
<pre><code><span class="keyword">*</span>   一列表项包含一个列表区块：

        <span class="variable">&lt;代码写在这&gt;</span>
</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>
<pre><code><span class="number">1986</span>. What <span class="tag">a</span> great season.
</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p>
<pre><code><span class="number">1986</span>\. What <span class="tag">a</span> great season.
</code></pre><h3 id="precode">代码区块</h3>

<p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p>
<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<pre><code>这是一个普通段落：

    这是一个代码区块。
</code></pre><p>Markdown 会转换成：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>这是一个普通段落：<span class="tag">&lt;/<span class="title">p</span>&gt;</span>

<span class="tag">&lt;<span class="title">pre</span>&gt;</span><span class="tag">&lt;<span class="title">code</span>&gt;</span>这是一个代码区块。
<span class="tag">&lt;/<span class="title">code</span>&gt;</span><span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>
<pre><code>Here <span class="keyword">is</span> an example <span class="keyword">of</span> <span class="constant">AppleScript</span>:

    <span class="keyword">tell</span> <span class="type">application</span> <span class="string">"Foo"</span>
        <span class="command">beep</span>
    <span class="keyword">end</span> <span class="keyword">tell</span>
</code></pre><p>会被转换为：</p>
<pre><code>&lt;p&gt;Here <span class="keyword">is</span> an example <span class="keyword">of</span> <span class="constant">AppleScript</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="keyword">tell</span> <span class="type">application</span> <span class="string">"Foo"</span>
    <span class="command">beep</span>
<span class="keyword">end</span> <span class="keyword">tell</span>
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>
<p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"footer"</span>&gt;
    &amp;<span class="keyword">copy</span>; <span class="number">2004</span> Foo Corporation
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>会被转换为：</p>
<pre><code>&lt;<span class="keyword">pre</span>&gt;&lt;code&gt;&amp;<span class="keyword">lt</span>;div class=<span class="string">"footer"</span>&amp;gt;
    &amp;amp;<span class="built_in">copy</span>; <span class="number">2004</span> Foo Corporation
&amp;<span class="keyword">lt</span>;/div&amp;gt;
&lt;/code&gt;&lt;/<span class="keyword">pre</span>&gt;
</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>
<h3 id="hr">分隔线</h3>

<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<pre><code><span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span>

<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>

<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>

- - -

---------------------------------------
</code></pre><hr>
<h2 id="span">区段元素</h2>

<h3 id="link">链接</h3>

<p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p>
<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>
<p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<pre><code>This is [<span class="link_label">an example</span>](<span class="link_url">http://example.com/ "Title"</span>) inline link.

[<span class="link_label">This link</span>](<span class="link_url">http://example.net/</span>) has no title attribute.
</code></pre><p>会产生：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>This is <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://example.com/"</span> <span class="attribute">title</span>=<span class="value">"Title"</span>&gt;</span>
an example<span class="tag">&lt;/<span class="title">a</span>&gt;</span> inline link.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>

<span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://example.net/"</span>&gt;</span>This link<span class="tag">&lt;/<span class="title">a</span>&gt;</span> has no
title attribute.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>
<pre><code>See my [<span class="link_label">About</span>](<span class="link_url">/about/</span>) page for details.   
</code></pre><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>
<pre><code>This is [<span class="link_label">an example</span>][<span class="link_reference">id</span>] reference-style link.
</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p>
<pre><code>This <span class="keyword">is</span> [an example] [<span class="property">id</span>] <span class="keyword">reference</span>-style link.
</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<pre><code>[<span class="link_reference">id</span>]:<span class="link_url"> http://example.com/  "Optional Title Here"</span>
</code></pre><p>链接内容定义的形式为：</p>
<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li>
</ul>
<p>下面这三种链接的定义都是相同：</p>
<pre><code>[<span class="link_reference">foo</span>]:<span class="link_url"> http://example.com/  "Optional Title Here"</span>
[<span class="link_reference">foo</span>]:<span class="link_url"> http://example.com/  'Optional Title Here'</span>
[<span class="link_reference">foo</span>]:<span class="link_url"> http://example.com/  (Optional Title Here)</span>
</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>
<p>链接网址也可以用尖括号包起来：</p>
<pre><code>[<span class="link_reference">id</span>]:<span class="link_url"> &lt;http://example.com/&gt;  "Optional Title Here"</span>
</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>
<pre><code>[id]<span class="symbol">:</span> <span class="symbol">http:</span>/<span class="regexp">/example.com/longish</span><span class="regexp">/path/to</span><span class="regexp">/resource/here</span>
    <span class="string">"Optional Title Here"</span>
</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>
<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p>
<pre><code>[<span class="link_label">link text</span>][<span class="link_reference">a</span>]
[<span class="link_label">link text</span>][<span class="link_reference">A</span>]
</code></pre><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p>
<pre><code>[<span class="link_label">Google</span>][<span class="link_reference"></span>]
</code></pre><p>然后定义链接内容：</p>
<pre><code>[<span class="link_reference">Google</span>]:<span class="link_url"> http://google.com/</span>
</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>
<pre><code>Visit [<span class="link_label">Daring Fireball</span>][<span class="link_reference"></span>] for more information.
</code></pre><p>然后接着定义链接：</p>
<pre><code>[<span class="link_reference">Daring Fireball</span>]:<span class="link_url"> http://daringfireball.net/</span>
</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>
<p>下面是一个参考式链接的范例：</p>
<pre><code><span class="tag">I</span> get 10 times more traffic from <span class="attr_selector">[Google]</span> <span class="attr_selector">[1]</span> than from
<span class="attr_selector">[Yahoo]</span> <span class="attr_selector">[2]</span> or <span class="attr_selector">[MSN]</span> <span class="attr_selector">[3]</span>.

  <span class="attr_selector">[1]</span><span class="value">: http://google.com/        <span class="string">"Google"</span>
  [<span class="number">2</span>]: http://search.yahoo.com/  <span class="string">"Yahoo Search"</span>
  [<span class="number">3</span>]: http://search.msn.com/    <span class="string">"MSN Search"</span></span>
</code></pre><p>如果改成用链接名称的方式写：</p>
<pre><code>I get 10 times more traffic from [<span class="link_label">Google</span>][<span class="link_reference"></span>] than from
[<span class="link_label">Yahoo</span>][<span class="link_reference"></span>] or [<span class="link_label">MSN</span>][<span class="link_reference"></span>].

  [google]: http://google.com/        "Google"
  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
  [msn]:    http://search.msn.com/    "MSN Search"
</code></pre><p>上面两种写法都会产生下面的 HTML。</p>
<pre><code>&lt;p&gt;I <span class="built_in">get</span> <span class="number">10</span> times more traffic <span class="built_in">from</span> &lt;<span class="operator">a</span> href=<span class="string">"http://google.com/"</span>
title=<span class="string">"Google"</span>&gt;Google&lt;/<span class="operator">a</span>&gt; than <span class="built_in">from</span>
&lt;<span class="operator">a</span> href=<span class="string">"http://search.yahoo.com/"</span> title=<span class="string">"Yahoo Search"</span>&gt;Yahoo&lt;/<span class="operator">a</span>&gt;
<span class="operator">or</span> &lt;<span class="operator">a</span> href=<span class="string">"http://search.msn.com/"</span> title=<span class="string">"MSN Search"</span>&gt;MSN&lt;/<span class="operator">a</span>&gt;.&lt;/p&gt;
</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>
<pre><code>I get 10 times more traffic from [<span class="link_label">Google</span>](<span class="link_url">http://google.com/ "Google"</span>)
than from [<span class="link_label">Yahoo</span>](<span class="link_url">http://search.yahoo.com/ "Yahoo Search"</span>) or
[<span class="link_label">MSN</span>](<span class="link_url">http://search.msn.com/ "MSN Search"</span>).
</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p>
<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>
<h3 id="em">强调</h3>

<p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>
<pre><code><span class="keyword">*</span>single asterisks<span class="keyword">*</span>

_single underscores_

<span class="keyword">*</span><span class="keyword">*</span>double asterisks<span class="keyword">*</span><span class="keyword">*</span>

__double underscores__
</code></pre><p>会转成：</p>
<pre><code><span class="tag">&lt;<span class="title">em</span>&gt;</span>single asterisks<span class="tag">&lt;/<span class="title">em</span>&gt;</span>

<span class="tag">&lt;<span class="title">em</span>&gt;</span>single underscores<span class="tag">&lt;/<span class="title">em</span>&gt;</span>

<span class="tag">&lt;<span class="title">strong</span>&gt;</span>double asterisks<span class="tag">&lt;/<span class="title">strong</span>&gt;</span>

<span class="tag">&lt;<span class="title">strong</span>&gt;</span>double underscores<span class="tag">&lt;/<span class="title">strong</span>&gt;</span>
</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>
<p>强调也可以直接插在文字中间：</p>
<pre><code>un<span class="keyword">*</span>frigging<span class="keyword">*</span>believable
</code></pre><p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p>
<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<pre><code><span class="string">\*this</span> text <span class="keyword">is</span> surrounded <span class="keyword">by</span> literal asterisks<span class="string">\*</span>
</code></pre><h3 id="code">代码</h3>

<p>如果要标记一小段行内代码，你可以用反引号把它包起来（<code>` </code>），例如：</p>
<pre><code>Use <span class="operator">the</span> `printf()` <span class="function"><span class="keyword">function</span>.</span>
</code></pre><p>会产生：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>Use the <span class="tag">&lt;<span class="title">code</span>&gt;</span>printf()<span class="tag">&lt;/<span class="title">code</span>&gt;</span> function.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>
<pre><code><span class="escape">``</span>There is <span class="literal">a</span> literal backtick (<span class="escape">`)</span> here.<span class="escape">``</span>
</code></pre><p>这段语法会产生：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">code</span>&gt;</span>There is a literal backtick (`) here.<span class="tag">&lt;/<span class="title">code</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>
<pre><code>A single backtick <span class="keyword">in</span> <span class="tag">a</span> <span class="tag">code</span> <span class="tag">span</span>: `` ` ``

A backtick-delimited string <span class="keyword">in</span> <span class="tag">a</span> <span class="tag">code</span> <span class="tag">span</span>: `` `foo` ``
</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;A single backtick <span class="keyword">in</span> <span class="tag">a</span> <span class="tag">code</span> <span class="tag">span</span>: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string <span class="keyword">in</span> <span class="tag">a</span> <span class="tag">code</span> <span class="tag">span</span>: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre><p>在代码区段内，<code>&amp;</code> 和尖括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p>
<pre><code>Please don't <span class="operator"><span class="keyword">use</span> <span class="keyword">any</span> <span class="string">`&lt;blink&gt;`</span> tags.</span>
</code></pre><p>转为：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>Please don't use any <span class="tag">&lt;<span class="title">code</span>&gt;</span>&amp;lt;blink&amp;gt;<span class="tag">&lt;/<span class="title">code</span>&gt;</span> tags.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</code></pre><p>你也可以这样写：</p>
<pre><code>`<span class="javascript">&amp;#<span class="number">8212</span>;</span>` <span class="keyword">is</span> the decimal-encoded equivalent <span class="keyword">of</span> `<span class="javascript">&amp;mdash;</span>`.
</code></pre><p>以产生：</p>
<pre><code><span class="variable">&lt;p&gt;</span><span class="variable">&lt;code&gt;</span>&amp;amp;<span class="comment">#8212;&lt;/code&gt; is the decimal-encoded</span>
equivalent of <span class="variable">&lt;code&gt;</span>&amp;amp;mdash;<span class="variable">&lt;/code&gt;</span>.<span class="variable">&lt;/p&gt;</span>
</code></pre><h3 id="img">图片</h3>

<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>
<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p>
<p>行内式的图片语法看起来像是：</p>
<pre><code>![<span class="link_label">Alt text</span>](<span class="link_url">/path/to/img.jpg</span>)

![<span class="link_label">Alt text</span>](<span class="link_url">/path/to/img.jpg "Optional title"</span>)
</code></pre><p>详细叙述如下：</p>
<ul>
<li>一个惊叹号 <code>!</code></li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上<br>选择性的 ‘title’ 文字。</li>
</ul>
<p>参考式的图片语法则长得像这样：</p>
<pre><code>![<span class="link_label">Alt text</span>][<span class="link_reference">id</span>]
</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<pre><code>[<span class="property">id</span>]: url/<span class="keyword">to</span>/image  <span class="string">"Optional title attribute"</span>
</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
<hr>
<h2 id="misc">其它</h2>

<h3 id="autolink">自动链接</h3>

<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<pre><code>&lt;<span class="string">http:</span><span class="comment">//example.com/&gt;</span>
</code></pre><p>Markdown 会转为：</p>
<pre><code>&lt;<span class="tag">a</span> href=<span class="string">"http://example.com/"</span>&gt;http:<span class="comment">//example.com/&lt;/a&gt;</span>
</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>
<pre><code><span class="tag">&lt;address@example.com&gt;</span>
</code></pre><p>Markdown 会转成：</p>
<pre><code>&lt;a href=<span class="string">"&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;"</span>&gt;&amp;<span class="title">#x61</span>;&amp;<span class="title">#x64</span>;&amp;<span class="title">#x64</span>;&amp;<span class="title">#x72</span>;&amp;<span class="title">#x65</span>;&amp;<span class="title">#115</span>;&amp;<span class="title">#115</span>;&amp;<span class="title">#64</span>;&amp;<span class="title">#101</span>;&amp;<span class="title">#120</span>;&amp;<span class="title">#x61</span>;
&amp;<span class="title">#109</span>;&amp;<span class="title">#x70</span>;&amp;<span class="title">#x6</span>C;e&amp;<span class="title">#x2</span>E;&amp;<span class="title">#99</span>;&amp;<span class="title">#111</span>;&amp;<span class="title">#109</span>;&lt;/a&gt;
</code></pre><p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「address@example.com」链接。</p>
<p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>
<h3 id="backslash">反斜杠</h3>

<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p>
<pre><code>\<span class="keyword">*</span>literal asterisks\<span class="keyword">*</span>
</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<pre><code>\   反斜线
`   反引号
<span class="bullet">*   </span>星号
_   底线
{}  花括号
[]  方括号
()  括弧
<span class="header">#   井字号</span>
<span class="bullet">+   </span>加号
<span class="bullet">-   </span>减号
.   英文句点
!   惊叹号
</code></pre><h2 id="acknowledgement">感谢</h2>

<p>感谢 <a href="https://twitter.com/#!/leafy7382" target="_blank" rel="external">leafy7382</a> 协助翻译，<a href="http://iamhlb.com/" target="_blank" rel="external">hlb</a>、<a href="http://twitter.com/randylien" target="_blank" rel="external">Randylien</a> 帮忙润稿，<a href="https://twitter.com/#!/ethantw" target="_blank" rel="external">ethantw</a> 的<a href="http://ethantw.net/projects/han/" target="_blank" rel="external">汉字标准格式・CSS Reset</a>， <a href="http://kidwm.net/" target="_blank" rel="external">WM</a> 回报文字错误。</p>
<p>感谢 <a href="https://github.com/fenprace" target="_blank" rel="external">fenprace</a>，<a href="https://github.com/addv" target="_blank" rel="external">addv</a>。</p>
<hr>
<h2 id="editor">Markdown 免费编辑器</h2>

<p>Windows 平台</p>
<ul>
<li><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a></li>
<li><a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="external">MarkPad</a></li>
</ul>
<p>Linux 平台</p>
<ul>
<li><a href="http://sourceforge.net/p/retext/home/ReText/" target="_blank" rel="external">ReText</a></li>
</ul>
<p>Mac 平台</p>
<ul>
<li><a href="http://mouapp.com/" target="_blank" rel="external">Mou</a></li>
</ul>
<p>在线编辑器</p>
<ul>
<li><a href="http://markable.in/" target="_blank" rel="external">Markable.in</a></li>
<li><a href="http://dillinger.io/" target="_blank" rel="external">Dillinger.io</a></li>
</ul>
<p>浏览器插件</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog" target="_blank" rel="external">MaDe</a> (Chrome)</li>
</ul>
<p>高级应用</p>
<ul>
<li><a href="http://www.sublimetext.com/2" target="_blank" rel="external">Sublime Text 2</a> + <a href="http://ttscoff.github.com/MarkdownEditing/" target="_blank" rel="external">MarkdownEditing</a> / <a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/" target="_blank" rel="external">教程</a></li>
</ul>
<p>*** 如有更好的 Markdown 免费编辑器推荐，请到<a href="https://gitcafe.com/riku/Markdown-Syntax-CN/tickets/1" target="_blank" rel="external">这里反馈</a>，谢谢！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&lt;&lt; <a href="http://wowubuntu.com">访问 Wow!Ubuntu</a></p>
<p><strong>NOTE:</strong> This is Simplelified  Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax">Markdown: Syntax</a>.</p>
<p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://markdown.tw/">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">查看这里</a> 。」—By @<a href="http://twitter.com/riku">riku</a></p>
<p><strong>注：</strong> 本项目托管于 <a href="http://gitcafe.com/riku/Markdown-Syntax-CN/">GitCafe</a>上，请通过”派生”和”合并请求”来帮忙改进本项目。</p>]]>
    
    </summary>
    
      <category term="Markdown" scheme="http://niuleipeng.com/tags/Markdown/"/>
    
      <category term="技术" scheme="http://niuleipeng.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术笔记" scheme="http://niuleipeng.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>